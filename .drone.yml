
# RUN container when DB in test would be needed (and add wait_db.sh script !!)
services:
  postgres:
    image: postgres
    environment:
      POSTGRES_PASSWORD: password
      POSTGRES_USER: user
      POSTGRES_DB: db

pipeline:
  flake8:
    image: python:3
    when:
      event: push
    environment:
      - PYTHONPATH=/drone/src
    commands:
      - pip install --no-cache flake8
      - flake8

  test:
    image: octoman/base
    when:
      event: push
    environment:
      PYTHONPATH: /drone/src
      DB_URL: postgresql://user:password@postgres:5432/db
      FLASK_APP: thupoll.app_factory:init_app
    commands:
      - pip install --no-cache -r requirements/test.txt
      - python3 scripts/wait_for_postgres.py $DB_URL
      - flask db upgrade
      - pytest

  release:
    image: appleboy/drone-ssh
    when:
      event: push
      branch:
        - master
    host:
      from_secret: deploy_host
    username:
      from_secret: deploy_user
    secrets: [ ssh_key ]
    port: 22
    script:
      - set -e
      - source ~/.bashrc
      - cd thupoll
      - git fetch
      - git reset HEAD --hard
      - git checkout ${DRONE_COMMIT_BRANCH}
      - git reset --hard origin/${DRONE_COMMIT_BRANCH}
      - docker-compose build base web
      - docker-compose up -d web

  telegram-push:
    image: appleboy/drone-telegram
    token:
      from_secret: telegram_token
    to:
      from_secret: telegram_notification_chat_id
    format: html
    when:
      event: push
      branch:
        exclude:
        - master
      status:
      - success
      - failure
    message: >
      {{#success build.status}}
        💚 Thupoll: <a href='http://drone.liinda.ru/octomen/thupoll/{{build.number}}'>build</a> succeeded. Good job.
      {{else}}
        🛑️ Thupoll: <a href='http://drone.liinda.ru/octomen/thupoll/{{build.number}}'>build</a> failed. Fix me please.
      {{/success}}

  telegram-PR:
    image: appleboy/drone-telegram
    token:
      from_secret: telegram_token
    to:
      from_secret: telegram_notification_chat_id
    format: markdown
    when:
      event: pull_request
    photo: ${DRONE_COMMIT_AUTHOR_AVATAR}
    message: >
      👉 Thupoll: New or update [PR](${DRONE_REPO_LINK}/pull/${DRONE_PULL_REQUEST}) from ${DRONE_COMMIT_AUTHOR}

  telegram-release:
    image: appleboy/drone-telegram
    token:
      from_secret: telegram_token
    to:
      from_secret: telegram_notification_chat_id
    format: html
    when:
      event: push
      branch:
      - master
      status:
      - success
      - failure
    message: >
      {{#success build.status}}
        🔔️ Thupoll: Release succeeded. Good job. Check <a href='http://thupoll.liinda.ru/api/ping'>url</a>
      {{else}}
        ⛔ Thupoll: ALARM! Release failed. Check <a href='http://thupoll.liinda.ru/api/ping'>url</a>
      {{/success}}
